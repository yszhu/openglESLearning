一、图元
	1、OpenGL ES 3.0 可绘制的图元
	1)三角形(triangle)
	2)线(line)
	3)点精灵(sprtes)

	2、绘制方式
	1)triangle 和line的方式分别有三种
	①GL_TRIANGLR_s,GL_TRIANGLE_STRIP,GL_TRIANGLE_FAN,
	使用GL_LINE_STRIP绘制图元需要注意绘制时点或索引的顺序（有关退化三角形），
	索引为，{0,1,2,3,4,5,6,7,8,9,10}，如果需要绘制的三角形数量足够多，
	绘制顺序为
	(0,1,2,),(2,1,3),(2,3,4),
			 (4,3,5),(4,5,6),
			 (6,5,4),(6,7,8),
			 (8,7,9),(8,9,10)

	②GL_LINES,GL_LINE_STRIP,GL_LINE_LOOP,绘制线可以指定线的宽度,API为
	glLineWidth()

	2)sprites 的图元是GL_POINTS
	①vertexShader 中输出的内建变量
	gl_PointSize可用于指点sprite的尺寸，和gl_Poisition一样重要
	②默认情况下OpenGL ES 3.0的坐标原点在左下，对于sprite，坐标原点在右上
	③gl_PointCoord是只能在绘制sprite图元时有效的用于fragmentShader的内建变量,
	它是一个vec2，范围0~1,用于描述sprite的坐标。

	3、绘制图元的API
	1)主要指定如何使用传到GPU中的顶点数据,一下三个API用于绘制非实例化的几何形状
	①glDrawArrays(mode,first,count),直接使用顶点数组
	②glFrawElements(mode,count,type,indices),使用索引
	③glDrawRangeElements(mode,start,end,count,type,indices)
	2)count(①),指需要绘制的点的数量，count(②，③),指需要用到的索引的数量( 不是点的数量)，type(API ②，③)为indices中元素的类型，
	start(API ③),end(API ③)要用到的indices的索引。

	4)图元重启(3.0以上的版本)
	1)减少绘制图元API的调用能改善性能，当绘制多个不相连的图元（如
	GL_TRIANGLE_STRIP,GL_TRIANGLE_FAN）时可以使用图元重启的方式，达到仅调用
	一次API的目的。
	2)图元重启的方式是在索引列表(indices)中插入一个特殊的索引，
	该索引的置为indices元素类型的最大可能值
	(如GL_UNSIGNED_BYTE或GL_UNSIGNED_SHORT的最大可能值分别是255和65535)

	4、驱动顶点
	1)对于插值器，如果使用限定符指明使用平面着色，就不会发生插值，那么图元
	所有像素颜色由该图元的驱动顶点的颜色决定，驱动顶点是哪个点根据API指定的mode
	决定

	5)几何形状实例化(绘制相似的对象很有用，如绘制人群)，有两个API
	①glDrewArraysInstanced()
	②glDrawElementsInstanced()
	暂略

	6)退化三角形(为兼容3.0之前的版本)，和图元重启的方式差不多，
	只不过插入的索引是三角形退化成一条线或一个点，重点在于新的被点了的点
	需要经过几个退化三角形后接入前面一个三角形的绘制顺序中。

二、片段着色器之前的步骤
	1)剪裁，视景体剪裁。
	2)透视分割,对三维坐标进行规范化(坐标值取值范围映射到[-1,1])
	3)视口变换，设置绘制的视口的位置可宽高
		glViewport(x,y,width,height)
	4)剔除，不妨称背面剪裁为剔除以区分视景体剪裁
		glFrontFace(dir) 指定顺时针(逆时针)为正面,三角形方向根据窗口坐标表示的
		有符号三角形的面积来计算。
		glCullFace(mode)根据mode进行剔除，GL_FRONT,GL_BACK和GL_FRONT_AND_BACK
		使用glEnable 和glDisable()来启用或禁用GL_CULL_FACE，决定背面剪裁是否进行。
	5)光栅化

三、图元装配阶段可配置的一些参数和配置使用的API
	1)深度冲突
	如果两个多边形相互重叠，可能会看到伪像，这些伪像称为深度冲突伪像
	使用glPolygonOffset()在深度值上添加一个便宜量，如果深度测试通过，则原始的深度值
	会被写入深度缓冲区。
	使用glEnable()和glDisable()启用或禁用GL_POLYGON_OFFSET_FILL

	1)遮挡查询
	遮挡查询可用于镜头炫光特效的可见性测试以及避免在包围提被遮挡的不可见对象上进
	行几何形状处理的优化
	暂略